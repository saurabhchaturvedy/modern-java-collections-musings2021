

* If we don't define equals() implementation of our own , default from object is implemented . (reference equality)

* (a==b) true
* a.equals(b) true

A General purpose semantic idea of equality is not provided by java by default .

* Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.

* StringBuilder does not have an Equals method .

* Object class equals() method takes an Object as an argument .

The equals method implements an equivalence relation on non-null object references:

It is reflexive: for any non-null reference value x, x.equals(x) should return true.
It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.
It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.
It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.
For any non-null reference value x, x.equals(null) should return false.

* Implementing Equality sometimes breaks the symmetric rule :

IS A relationship only works in one direction . (Liskov Substitution Principle)

TruckTire is a Tire
A Tire is not a TruckTire


java.lang.Comparable interface provides natural ordering (Order coded into some objects itself)

Lists from Java 8 has sort() method

passing sort as null for elements that have natural ordering , elements gets sorted

int compareTo(T o)

this.compareTo(that)  (by default ascending order, swap values for comparisons to get descending values)

this comes before that -ve
this comes after that +ve
this at same position as that 0



java.util.Comparator interface is used to create multiple order implementations , which can be passed in object's sort method to work .

Hashing - pertains to ordering for better searching of elements across collection of objects .

Ordering of unrelated items - done using Hashing , provided sometimes totally different items may land up in exact same position .

Hashcode - unique number representative of an objects , which can create ordering which works for searching even among unrelated things .
Number must be reliable and repeatable for the sake of consistency .

Hashcodes can be same for two different objects .

Two different hashcodes might try to store the data in same bucket . (Collision which can be solved by added entry in a Linked data structure)

Hashing storage resize based on Load Factor


Rules for implementing Hash Codes


1. If two objects are equals , then they must return same hshcode values

2. Hashcode of an object must not be altered by any field or change that doesn't also alter equality .

3. If in a class with fields A,B,C,D,E only fields A,B,C are used in calculation of equality , then its a bad error if we use fields D and E in the computation
   of hashCode() .

4. Although calculation of hashCode() does not mandatory needs to consider all fields used in calculation of equality .

5. Goal of hashing is to speed up mechanism of searching algorithm

time saved in making the search quicker > time spent in calculating the hashcode

Fields with larger range of values are much better for calculating hashcode , as they provide more variations

6. If you override equals() , then we must also override hashCode() method to maintain the contract that , two equal objects must have equal hashCodes .

Because , the equals method exists because , someone wants to search something , and that can only be correctly possible with combination of both .

Equals - comparison
hashCode - search