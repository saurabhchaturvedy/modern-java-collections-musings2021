

* If we don't define equals() implementation of our own , default from object is implemented . (reference equality)

* (a==b) true
* a.equals(b) true

A General purpose semantic idea of equality is not provided by java by default .

* Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.

* StringBuilder does not have an Equals method .

* Object class equals() method takes an Object as an argument .

The equals method implements an equivalence relation on non-null object references:

It is reflexive: for any non-null reference value x, x.equals(x) should return true.
It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.
It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.
It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.
For any non-null reference value x, x.equals(null) should return false.

* Implementing Equality sometimes breaks the symmetric rule :

IS A relationship only works in one direction . (Liskov Substitution Principle)

TruckTire is a Tire
A Tire is not a TruckTire
