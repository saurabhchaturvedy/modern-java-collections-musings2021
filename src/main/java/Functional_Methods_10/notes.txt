
Functional Programming Style - passing behaviour as arguments to and return values from other behaviours

doStuff(behaviour)

behaviour getStuff()

Design Patterns - Visitor , Command , State...

Anonymous Inner classes - earlier way (pre-functional)





(s1, s2) -> s1.getHeight() - s2.getHeight()  -> Comparator.comparingInt(Student::getHeight);

(s1, s2) -> s2.getHeight() - s1.getHeight()  -> Comparator.comparingInt(Student::getHeight).reversed();


Methods specially designed to support functional programming style ::

forEach()  consumer -> accept(T t)  (s) -> {doSomething} -> return void

removeIf() predicate ->  test(T t) (s) -> {doSomething} -> return boolean

replaceAll()  unary operator ->  apply(T t)  (T) -> {doSomething} -> return E

Sets do not have any methods that take behavioral arguments


Methods specially designed to support functional programming style in Map ::

myMap.forEach(    // BiConsumer (K,V) -{doSomething} -> return void
(key,value) -> {
behaviour
}
)

myMap.entrySet().forEach(

(entry) -> {
behaviour
}
);


Modifying a Map ::

map.compute(key,behaviour)

// create, modify or delete a row



map.compute(key, (k,v)->v.concat("-test"));  // creates an entry if key not present (k,null) or updates existing entry with modified value (k,v)

map.compute(key,(k,v)->null)  // deletes an entry value in the map

computeIfAbsent - only modifies an entry if key is absent

computeIfPresent - only modify an entry if key is present





